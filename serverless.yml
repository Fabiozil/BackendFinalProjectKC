service: api-backend

frameworkVersion: "3"

custom:
    secrets: ${file(secrets.json)}
    optimize:
        external: ["swagger-ui-dist"]

plugins:
    - serverless-plugin-typescript
    - serverless-plugin-optimize
    - serverless-offline

package:
    individually: true

provider:
    name: aws
    runtime: nodejs14.x
    region: us-east-1
    # vpc:
    #     securityGroupIds:
    #         - ${ssm:/secrets/SECURITY_GROUP_ID}
    #     subnetIds:
    #         - ${ssm:/secrets/SUBNET_ID}
    environment:
        TOKEN_KEY: ${ssm:/ApiBackendKK/secrets/TOKEN_KEY}
        # TEST_ENV: ${ssm:/TestVariable}
    tags:
        Name: api-backend
        Description: "Proyecto final KK"
        Responsible: "Desarrollador Backend Fabio Anaya"
        ProjectName: "Api Backend"
        Environment: pdn
        creationDate: 2022-02-15
        resourceType: private
        dataType: private
    apiGateway:
        restApiId: ${ssm:/ApiBackendKK/secrets/REST_API_ID}
        restApiRootResourceId: ${ssm:/ApiBackendKK/secrets/REST_API_RESOURCE_ID}
        apiKeys:
            - name: apiKey
              value: ${ssm:/ApiBackendKK/secrets/CUSTOM_AUTHORIZER}
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:DescribeTable
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                  Resource:
                      - "Fn::GetAtt": [ApiBackendUsersTable, Arn]
                      - "Fn::GetAtt": [ApiBackendKKPostsTable, Arn]
                - Effect: "Allow"
                  Action:
                      - lambda:InvokeFunction
                      - lambda:InvokeAsync
                  Resource: "*"

functions:
    main:
        handler: src/lambda.handler
        timeout: 29
        events:
            - http:
                  cors: true
                  method: get
                  path: /user/ping
                  private: true
            - http:
                  cors: true
                  method: post
                  path: /user/login
                  private: true
            - http:
                  cors: true
                  method: post
                  path: /user/register
                  private: true
            - http:
                  cors: true
                  method: get
                  path: /user/reFresToken
                  private: true
resources:
    # DynamoDB
    - ${file(aws-resources/dynamodb.yml)}
